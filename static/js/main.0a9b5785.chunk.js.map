{"version":3,"sources":["components/Cards/Card.js","components/Wrapper/Wrapper.js","components/NavBar/NavBar.js","components/Footer/footer.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","alt","name","src","process","image","id","onClick","imageClicked","Wrapper","children","NavBar","score","highscore","Footer","Jumbotron","App","state","clicked","_this","includes","alert","setState","push","length","i","j","Math","floor","random","_ref","_this2","this","components_NavBar_NavBar","components_Jumbotron_Jumbotron","components_Wrapper_Wrapper","map","Cards_Card","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y8BAWeA,SARD,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAA8BC,gBAA+BR,EAAMS,MAAqBC,GAAIV,EAAMU,GAAIC,QAAS,kBAAMX,EAAMY,aAAaZ,EAAMU,WCD3JG,SAFC,SAAAb,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMc,YCY1CC,SAZA,SAAAf,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,oBAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,iBAAsCJ,EAAMgB,OAC5Cf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,cAAuCJ,EAAMiB,eCA1CC,EANA,SAAAlB,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YCKJe,SANG,SAAAnB,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,8HCkEWgB,oNA7DbC,MAAQ,CACNZ,QACAa,QAAS,GACTN,MAAO,EACPC,UAAW,KAGbL,aAAe,SAAAF,GACb,IAAMY,EAAUC,EAAKF,MAAMC,QAG3B,GAAIA,EAAQE,SAASd,GAEnB,OADAe,MAAM,gDACFF,EAAKF,MAAML,MAAQO,EAAKF,MAAMJ,eAChCM,EAAKG,SAAS,CAAEjB,QAAOa,QAAS,GAAIL,UAAWM,EAAKF,MAAML,MAAOA,MAAO,SAGxEO,EAAKG,SAAS,CAAEjB,QAAOa,QAAS,GAAIN,MAAO,IAO7CM,EAAQK,KAAKjB,GACba,EAAKG,SAAS,CAAEjB,QAAOO,MAAOM,EAAQM,SAEtC,IAAK,IAAIC,EAAIpB,EAAMmB,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADCK,EAElB,CAACzB,EAAMqB,GAAIrB,EAAMoB,IAAvCpB,EAAMoB,GAFkCK,EAAA,GAE9BzB,EAAMqB,GAFwBI,EAAA,GAIpB,KAAnBZ,EAAQM,SACVH,MAAM,2CACNF,EAAKG,SAAS,CAAEjB,QAAOa,QAAS,GAAIL,UAAW,GAAID,MAAO,8EAQvD,IAAAmB,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,CAAQrB,MAAOoB,KAAKf,MAAML,MAAOC,UAAWmB,KAAKf,MAAMJ,YACvDhB,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,KACCH,KAAKf,MAAMZ,MAAM+B,IAAI,SAAA/B,GAAK,OACvBR,EAAAC,EAAAC,cAACsC,EAAD,CACA/B,GAAID,EAAMC,GACVE,aAAcuB,EAAKvB,aACnBH,MAAOA,EAAMA,WAIjBR,EAAAC,EAAAC,cAACuC,EAAD,cAxDUC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0a9b5785.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Cards = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={process.env.PUBLIC_URL ? process.env.PUBLIC_URL + \"/\" + props.image : props.image} id={props.id} onClick={() => props.imageClicked(props.id)}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = props => (\r\n    <div className=\"navBar sticky\">\r\n        <h1 className=\"title\">Memory Challenge</h1>\r\n\r\n        <div className=\"scores\">\r\n            <div className=\"score\">Current Score:{props.score}</div>\r\n            <div className=\"highscore\">Highscore: {props.highscore}</div>\r\n        </div>\r\n\r\n    </div>\r\n);\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./footer\"; \r\n\r\nconst Footer = props => (\r\n    <div className=\"footer\">\r\n\r\n    </div>\r\n    );\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = props => (\r\n    <div className=\"jumbotron\">\r\n    <h1 className=\"jumbotronText\">Click a different member of the Royal Family to increase your score. See how strong your Royal Family memory is!</h1>\r\n    </div>\r\n    );\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport image from \"./image.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    image,\n    clicked: [],\n    score: 0,\n    highscore: 0\n  };\n\n  imageClicked = id => {\n    const clicked = this.state.clicked;\n\n    //if statement when image has already been clicked\n    if (clicked.includes(id)) {\n      alert(\"You have already clicked that one. You lose.\");\n      if (this.state.score > this.state.highscore) {\n        this.setState({ image, clicked: [], highscore: this.state.score, score: 0 });\n        return;\n      } else {\n        this.setState({ image, clicked: [], score: 0 });\n        return;\n      }\n    }\n\n    //if statement when the id is not in the array\n    else {\n      clicked.push(id);\n      this.setState({ image, score: clicked.length });\n\n      for (let i = image.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [image[i], image[j]] = [image[j], image[i]];\n      }\n      if (clicked.length === 12) {\n        alert(\"You did it! You clicked all the images!\");\n        this.setState({ image, clicked: [], highscore: 12, score: 0 });\n      }\n      return;\n    }\n  };\n\n\n\n  render() {\n    return (\n      <div>\n        <NavBar score={this.state.score} highscore={this.state.highscore} />\n        <Jumbotron />\n        <Wrapper>\n        {this.state.image.map(image => (\n            <Cards \n            id={image.id} \n            imageClicked={this.imageClicked}\n            image={image.image} \n            />\n        ))}\n          </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}